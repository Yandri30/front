{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\"; //IMPORTAMOS EL MODELO USER\n\nimport { User } from \"../models/User\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(_http) {\n      this._http = _http;\n      this.url = environment.url; //AQUI SE GUARDA EL URL DE MI BACKEND\n\n      this.user = new User('', '', '', '', '', '', '', ''); //INICIALIZAMOS EL MODELO CON CADENAS VACIAS, 5 CADENAS VACIAS YA QUE SON 5 ATRIBUTOS\n    }\n\n    login(user, getToken = false) {\n      const json = user; //COMPROBAMOS SI HAY UN TOKEN O NO\n\n      if (getToken != false) {\n        user.gettoken = true; //SI ES NULO PASARÁ A TRUE\n      }\n\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this._http.post(this.url + 'user/' + 'login', json, {\n        headers: headers\n      });\n    } //PARA OBTENER EL TOKEN DEL USUARIO\n\n\n    getToken() {\n      //OBTENEMOS LA LLAVE TOKEN EN EL LOCAL STORAGE\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        this.token = token;\n      } else {\n        this.token = null;\n      }\n\n      return this.token;\n    } //PARA OBTENER LOS DATOS DE UN USUARIO AUTENTICADO\n\n\n    getIdentity() {\n      //OBTENEMOS LA LLAVE IDENTITY EN EL LOCAL STORAGE\n      const identity = JSON.parse(localStorage.getItem('identity') || \"[]\"); //POR SI ACASO ESTE NULO, NO SE VERA AFECTADA LA APP\n\n      if (identity) {\n        this.identity = identity;\n      } else {\n        this.identity = null;\n      }\n\n      return this.identity;\n    }\n\n    get_users(filtro) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this._http.get(this.url + 'user/' + 'listado/' + filtro, {\n        headers: headers\n      });\n    }\n\n    post_user(data) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this._http.post(this.url + 'user/' + 'registrar', data, {\n        headers: headers\n      });\n    }\n\n    get_user(id) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this._http.get(this.url + 'user/' + 'ver/' + id, {\n        headers: headers\n      });\n    }\n\n    put_user(data) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this._http.put(this.url + 'user/' + 'editar/' + data.id, data, {\n        headers: headers\n      });\n    }\n\n    eliminar_user(id) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      return this._http.delete(this.url + 'user/' + 'eliminar/' + id, {\n        headers: headers\n      });\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}